'''
def safe_tensor_to_item(tensor, index=None):
    """Safely convert tensor to item, handling different tensor dimensions"""
    try:
        if tensor.dim() == 0:  # scalar tensor
            return tensor.item()
        elif tensor.dim() == 1:  # 1D tensor
            return tensor[index].item() if index is not None else tensor[0].item()
        else:  # multi-dimensional tensor
            return tensor[index].item() if index is not None else tensor[0].item()
    except (IndexError, RuntimeError):
        # Return a default value or handle the error as needed
        return 0.0

def process_sample_batch(X, start_idx, batch_size):
    """Process a batch of samples and return their predictions"""
    end_idx = min(start_idx + batch_size, len(X))
    sample_features = X[start_idx:end_idx]
    sample_features_tensor = torch.tensor(sample_features, dtype=torch.float32).to(pricing_strategy.device)
    
    try:
        recommendations = pricing_strategy.model(sample_features_tensor)
        market_condition_tensor, price_elasticity_tensor, recommended_prices_tensor = recommendations
        
        results = []
        for i in range(end_idx - start_idx):
            result = {
                'sample_id': start_idx + i + 1,
                'market_condition': safe_tensor_to_item(market_condition_tensor, i),
                'price_elasticity': safe_tensor_to_item(price_elasticity_tensor, i),
                'recommended_price': safe_tensor_to_item(recommended_prices_tensor, i)
            }
            results.append(result)
        return results
    except Exception as e:
        st.error(f"Error processing batch: {str(e)}")
        return []

# Streamlit sidebar for navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio("Select a page:", ["Pricing Strategy", "Chatbot"])

# Pricing Strategy Page
if page == "Pricing Strategy":
    st.title("Pricing Strategy Predictor")
    
    uploaded_file = st.file_uploader("Upload CSV", type="csv")

    if uploaded_file:
        try:
            # Read the uploaded CSV
            df = pd.read_csv(uploaded_file)
            st.write("Data Preview:")
            st.write(df.head())

            # Preprocess and prepare features
            df_processed = pricing_strategy.preprocess_features(df)
            X = pricing_strategy.prepare_features(df_processed)

            # Load the model
            input_dim = X.shape[1]
            pricing_strategy.load_model(input_dim)

            # Process samples
            num_samples = min(10, len(X))
            all_results = process_sample_batch(X, 0, num_samples)

            if all_results:
                # Display results
                st.subheader("Pricing Strategy Recommendations")

                tab1, tab2 = st.tabs(["Individual Samples", "Summary"])

                with tab1:
                    for result in all_results:
                        with st.expander(f"Sample {result['sample_id']} Details"):
                            st.write(f"Market Condition: {result['market_condition']:.2f}")
                            st.write(f"Price Elasticity: {result['price_elasticity']:.2f}")
                            st.write(f"Recommended Price: ${result['recommended_price']:.2f}")

                with tab2:
                    results_df = pd.DataFrame(all_results)
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Avg Market Condition", 
                                f"{results_df['market_condition'].mean():.2f}")
                    with col2:
                        st.metric("Avg Price Elasticity", 
                                f"{results_df['price_elasticity'].mean():.2f}")
                    with col3:
                        st.metric("Avg Recommended Price", 
                                f"${results_df['recommended_price'].mean():.2f}")

                    st.subheader("Price Recommendations Overview")
                    chart_data = results_df[['sample_id', 'recommended_price']].set_index('sample_id')
                    st.line_chart(chart_data)
            else:
                st.warning("No results were generated. Please check your input data.")

        except Exception as e:
            st.error(f"Error processing file: {str(e)}")

'''
